// Generated by CoffeeScript 1.9.3
(function() {
  angular.module('app').factory('DialogPlugin', function($window, $q, $log, PluginUtils) {
    var AudioCtx, _isConfirm, _toButtonIndex, beepFallback, ctx, html5Beep, pluginAlert, pluginBeep, pluginConfirm, pluginName, pluginPrompt, pluginTest, service;
    pluginName = 'Dialogs';
    pluginTest = function() {
      return $window.navigator && $window.navigator.notification;
    };

    /*
       * Button indexes :
       *    - 0 : cancel with backdrop
       *    - 1 : Ok
       *    - 2 : Annuler
       * Or, your index in buttonLabels array but one based !!! (0 is still cancel)
     */
    service = {
      alert: pluginAlert,
      confirm: function(message, _title) {
        return pluginConfirm(message, _title).then(function(buttonIndex) {
          return _isConfirm(buttonIndex);
        });
      },
      confirmMulti: pluginConfirm,
      prompt: function(message, _title, _defaultText) {
        return pluginPrompt(message, _title, null, _defaultText).then(function(result) {
          result.confirm = _isConfirm(result.buttonIndex);
          return result;
        });
      },
      promptMulti: pluginPrompt,
      beep: pluginBeep
    };
    AudioCtx = window.AudioContext || window.webkitAudioContext;
    pluginAlert = function(message, _title, _buttonName) {
      return PluginUtils.onReady(pluginName, pluginTest).then((function() {
        var defer;
        defer = $q.defer();
        $window.navigator.notification.alert(message, (function() {
          return defer.resolve();
        }), _title, _buttonName);
        return defer.promise;
      }), function(error) {
        $log.error('pluginError:' + pluginName, error);
        return $window.alert(message);
      });
    };
    pluginConfirm = function(message, _title, _buttonLabels) {
      return PluginUtils.onReady(pluginName, pluginTest).then((function() {
        var defer;
        defer = $q.defer();
        $window.navigator.notification.confirm(message, (function(buttonIndex) {
          return defer.resolve(buttonIndex);
        }), _title, _buttonLabels);
        return defer.promise;
      }), function(error) {
        $log.error('pluginError:' + pluginName, error);
        return _toButtonIndex($window.confirm(message));
      });
    };
    pluginPrompt = function(message, _title, _buttonLabels, _defaultText) {
      return PluginUtils.onReady(pluginName, pluginTest).then((function() {
        var defer;
        defer = $q.defer();
        $window.navigator.notification.prompt(message, (function(result) {
          return defer.resolve(result);
        }), _title, _buttonLabels, _defaultText);
        return defer.promise;
      }), function(error) {
        var text;
        $log.error('pluginError:' + pluginName, error);
        text = $window.prompt(message, _defaultText);
        return {
          buttonIndex: _toButtonIndex(text),
          input1: text
        };
      });
    };
    pluginBeep = function(times) {
      if (!times) {
        times = 1;
      }
      return PluginUtils.onReady(pluginName, pluginTest).then((function() {
        return $window.navigator.notification.beep(times);
      }), function(error) {
        $log.error('pluginError:' + pluginName, error);
        if (beepFallback) {
          return beepFallback(times);
        } else {
          return $q.reject(error);
        }
      });
    };
    _isConfirm = function(buttonIndex) {
      if (buttonIndex === 1) {
        return true;
      } else {
        return false;
      }
    };
    _toButtonIndex = function(value) {
      if (value) {
        return 1;
      } else {
        return 2;
      }
    };
    if (AudioCtx) {
      ctx = new AudioCtx;
      html5Beep = function(callback) {
        var duration, osc, type;
        duration = 200;
        type = 0;
        if (!callback) {
          callback = function() {};
        }
        osc = ctx.createOscillator();
        osc.type = type;
        osc.connect(ctx.destination);
        osc.noteOn(0);
        return $window.setTimeout((function() {
          osc.noteOff(0);
          return callback();
        }), duration);
      };
      beepFallback = function(times) {
        if (times > 0) {
          return html5Beep(function() {
            return $window.setTimeout((function() {
              return beepFallback(times - 1);
            }), 500);
          });
        }
      };
    }
    return service;
  });


  /**************************
   *                        *
   *      Browser Mock      *
   *                        *
  #************************
   */

  ionic.Platform.ready(function() {
    if (!(ionic.Platform.isAndroid() || ionic.Platform.isIOS() || ionic.Platform.isIPad())) {
      if (!window.navigator) {
        window.navigator = {};
      }
      if (!window.navigator.notification) {
        return window.navigator.notification = (function() {
          var beep, ctx, html5Beep;
          ctx = new (window.AudioContext || window.webkitAudioContext);
          html5Beep = function(callback) {
            var duration, osc, type;
            duration = 200;
            type = 0;
            if (!callback) {
              callback = function() {};
            }
            osc = ctx.createOscillator();
            osc.type = type;
            osc.connect(ctx.destination);
            osc.noteOn(0);
            window.setTimeout((function() {
              osc.noteOff(0);
              callback();
            }), duration);
          };
          beep = function(times) {
            if (times > 0) {
              html5Beep(function() {
                window.setTimeout((function() {
                  beep(times - 1);
                }), 500);
              });
            }
          };
          return {
            alert: function(message, alertCallback, title, buttonName) {
              window.alert(message);
              if (alertCallback) {
                alertCallback();
              }
            },
            confirm: function(message, confirmCallback, title, buttonLabels) {
              var c;
              c = window.confirm(message);
              if (confirmCallback) {
                confirmCallback(c ? 1 : 2);
              }
            },
            prompt: function(message, promptCallback, title, buttonLabels, defaultText) {
              var text;
              text = window.prompt(message, defaultText);
              if (promptCallback) {
                promptCallback({
                  buttonIndex: text ? 1 : 2,
                  input1: text
                });
              }
            },
            beep: beep
          };
        })();
      }
    }
  });

}).call(this);

//# sourceMappingURL=dialogs.js.map
