// Generated by CoffeeScript 1.9.3
(function() {
  angular.module('app').factory('ParsePlugin', function($window, $q, $log, PluginUtils) {
    var _exec, pluginName, pluginTest, service;
    pluginName = 'Parse';
    pluginTest = function() {
      return $window.parsePlugin;
    };
    service = {
      initialize: function(appId, clientKey) {
        return _exec($window.parsePlugin.initialize, appId, clientKey);
      },
      getInstallationId: function() {
        return _exec($window.parsePlugin.getInstallationId);
      },
      getInstallationObjectId: function() {
        return _exec($window.parsePlugin.getInstallationObjectId);
      },
      subscribe: function(channel) {
        return _exec($window.parsePlugin.subscribe, channel);
      },
      unsubscribe: function(channel) {
        return _exec($window.parsePlugin.unsubscribe, channel);
      },
      getSubscriptions: function() {
        return _exec($window.parsePlugin.getSubscriptions);
      },
      onMessage: function() {
        return _exec($window.parsePlugin.onMessage);
      }
    };
    _exec = function(fn) {
      return PluginUtils.onReady(pluginName, pluginTest).then(function() {
        var defer, fnArgs, i;
        defer = $q.defer();
        fnArgs = [];
        i = 1;
        while (i < arguments.length) {
          fnArgs.push(arguments[i]);
          i++;
        }
        fnArgs.push(function(res) {
          return defer.resolve(res);
        });
        fnArgs.push(function(error) {
          $log.error('pluginError:' + pluginName, error);
          return defer.reject(error);
        });
        fn.apply(null, fnArgs);
        return defer.promise;
      });
    };
    return service;
  });


  /**************************
     *                        *
     *      Browser Mock      *
     *                        *
     *************************
   */

  ionic.Platform.ready(function() {
    if (!(ionic.Platform.isAndroid() || ionic.Platform.isIOS() || ionic.Platform.isIPad())) {
      if (!window.parsePlugin) {
        return window.parsePlugin = (function() {
          var subscriptions;
          subscriptions = [];
          return {
            initialize: function(appId, clientKey, successCallback, errorCallback) {
              if (successCallback) {
                successCallback();
              }
            },
            getInstallationId: function(successCallback, errorCallback) {
              if (successCallback) {
                successCallback('7ff61742-ab67-42aa-bf48-d821afb44022');
              }
            },
            getInstallationObjectId: function(successCallback, errorCallback) {
              if (successCallback) {
                successCallback('ED4j8uPOth');
              }
            },
            subscribe: function(channel, successCallback, errorCallback) {
              subscriptions.push(channel);
              if (successCallback) {
                successCallback();
              }
            },
            unsubscribe: function(channel, successCallback, errorCallback) {
              subscriptions.splice(subscriptions.indexOf(channel), 1);
              if (successCallback) {
                successCallback();
              }
            },
            getSubscriptions: function(successCallback, errorCallback) {
              if (successCallback) {
                successCallback(subscriptions);
              }
            },
            onMessage: function(successCallback, errorCallback) {}
          };
        })();
      }
    }
  });

}).call(this);

//# sourceMappingURL=parse.js.map
