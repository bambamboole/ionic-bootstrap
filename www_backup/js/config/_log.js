// Generated by CoffeeScript 1.9.3
(function() {
  var Logger;

  Logger = (function() {
    var Scheduler, _getUserId, cache, config, createUuid, track;
    createUuid = function() {
      var S4;
      S4 = function() {
        return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);
      };
      return (S4() + S4() + '-' + S4() + '-4' + S4().substr(0, 3) + '-' + S4() + '-' + S4() + S4() + S4()).toLowerCase();
    };
    track = function(name, event, _allowNoUser) {
      var msg;
      if (typeof event === 'string') {
        event = {
          messgae: event
        };
      }
      if (!event.name) {
        event.name = name;
      }
      if (!event.time) {
        event.time = Date.now();
      }
      if (!event.user) {
        event.user = _getUserId();
      }
      if (!event.appVersion && Config) {
        event.appVersion = Config.appVersion;
      }
      if (!event.source) {
        event.source = {};
      }
      if (!event.source.url && window && window.location) {
        event.source.url = window.location.href;
      }
      if (!event.id) {
        event.id = createUuid();
        event.prevId = cache.currentEventId;
        cache.currentEventId = event.id;
      }
      if (!event.user && !_allowNoUser) {
        window.setTimeout((function() {
          track(name, event, true);
        }), 2000);
      } else {
        if (config.verbose) {
          console.log('$[track] ' + name, event);
        }
        if (config.track) {
          if (config.async && event.name !== 'exception') {
            Scheduler.schedule(event);
          } else {
            Scheduler.send(event, function(status) {
              if (status === 'ko') {
                Scheduler.schedule(event);
              }
            });
          }
        }
        if (name === 'error' && config.debug && event.data.error) {
          msg = event.data && event.data.error ? (event.data.error.message ? event.data.error.message : event.data.error) : '';
          window.alert('Error: ' + event.data.type + '\n' + msg + '\nPlease contact: ' + Config.emailSupport);
        }
        if (name === 'exception') {
          msg = event.data && event.data.message ? event.data.message : event.message;
          window.alert('Exception: ' + msg + '\nPlease contact: ' + Config.emailSupport);
        }
      }
    };
    _getUserId = function() {
      var user;
      if (cache && cache.userId) {
        return cache.userId;
      } else if (localStorage) {
        user = JSON.parse(localStorage.getItem(config.storagePrefix + 'user'));
        if (user && user.id) {
          cache.userId = user.id;
          return user.id;
        }
      }
    };
    'use strict';
    Scheduler = (function() {
      var _addEvent, _addEvents, _getEvents, _resetEvents, _setEvents, _startScheduler, _stopScheduler, eventSender, events, init, schedule, send, sendAll;
      events = [];
      eventSender = null;
      init = function() {
        if (localStorage) {
          events = _getEvents() || [];
          if (events.length > 0) {
            _startScheduler();
          }
        }
      };
      schedule = function(event) {
        _addEvent(event);
        _startScheduler();
      };
      send = function(event, callback) {

        /*$.ajax({
          type: 'POST',
          url: config.backendUrl+'/api/v1/track/event',
          data: JSON.stringify(event),
          contentType: 'application/json'
        })
        .done(function(data, textStatus, jqXHR)       { if(callback){callback('ok');} })
        .fail(function(jqXHR, textStatus, errorThrown){ if(callback){callback('ko');} });
         */
        if (callback) {
          callback('ok');
        }
      };
      sendAll = function(events, callback) {

        /*$.ajax({
          type: 'POST',
          url: config.backendUrl+'/api/v1/track/events',
          data: JSON.stringify(events),
          contentType: 'application/json'
        })
        .done(function(data, textStatus, jqXHR)       { if(callback){callback('ok');} })
        .fail(function(jqXHR, textStatus, errorThrown){ if(callback){callback('ko');} });
         */
        if (callback) {
          callback('ok');
        }
      };
      _startScheduler = function() {
        var i;
        if (eventSender === null && events.length > 0) {
          i = 0;
          while (i < events.length) {
            events[i].sending = false;
            i++;
          }
          eventSender = window.setInterval((function() {
            var event, toSend;
            if (events.length === 0) {
              _stopScheduler();
            } else if (events.length === 1) {
              event = events[0];
              _resetEvents();
              send(event, function(status) {
                if (status === 'ko') {
                  _addEvent(event);
                  _stopScheduler();
                }
              });
            } else {
              toSend = events;
              _resetEvents();
              sendAll(toSend, function(status) {
                if (status === 'ko') {
                  _addEvents(toSend);
                  _stopScheduler();
                }
              });
            }
          }), config.scheduler.interval);
        }
      };
      _stopScheduler = function() {
        if (eventSender !== null) {
          window.clearInterval(eventSender);
          eventSender = null;
        }
      };
      _addEvent = function(event) {
        events.push(event);
        _setEvents(events);
      };
      _addEvents = function(eventsToAdd) {
        events = events.concat(eventsToAdd);
        _setEvents(events);
      };
      _resetEvents = function() {
        events = [];
        _setEvents(events);
      };
      _setEvents = function(events) {
        if (localStorage) {
          localStorage.setItem(config.scheduler.storageKey, JSON.stringify(events));
        }
      };
      _getEvents = function() {
        if (localStorage) {
          return JSON.parse(localStorage.getItem(config.scheduler.storageKey));
        }
      };
      return {
        init: init,
        schedule: schedule,
        send: send
      };
    })();
    config = {
      storagePrefix: Config.storagePrefix,
      backendUrl: Config.backendUrl,
      verbose: Config.verbose,
      debug: Config.debug,
      track: Config.track,
      async: true,
      scheduler: {
        storageKey: 'tracking-events-cache',
        interval: 3000
      }
    };
    cache = {
      currentEventId: null,
      userId: null,
      deviceId: null
    };
    Scheduler.init();
    return {
      track: track
    };
  })();

  window.onerror = function(message, url, line, col, error) {
    'use strict';
    var data, stopPropagation;
    stopPropagation = false;
    data = {
      type: 'javascript'
    };
    if (message) {
      data.message = message;
    }
    if (url) {
      data.fileName = url;
    }
    if (line) {
      data.lineNumber = line;
    }
    if (col) {
      data.columnNumber = col;
    }
    if (error) {
      if (error.name) {
        data.name = error.name;
      }
      if (error.stack) {
        data.stack = error.stack;
      }
    }
    if (navigator) {
      if (navigator.userAgent) {
        data['navigator.userAgent'] = navigator.userAgent;
      }
      if (navigator.platform) {
        data['navigator.platform'] = navigator.platform;
      }
      if (navigator.vendor) {
        data['navigator.vendor'] = navigator.vendor;
      }
      if (navigator.appCodeName) {
        data['navigator.appCodeName'] = navigator.appCodeName;
      }
      if (navigator.appName) {
        data['navigator.appName'] = navigator.appName;
      }
      if (navigator.appVersion) {
        data['navigator.appVersion'] = navigator.appVersion;
      }
      if (navigator.product) {
        data['navigator.product'] = navigator.product;
      }
    }
    Logger.track('exception', {
      data: data
    });
    return stopPropagation;
  };

}).call(this);

//# sourceMappingURL=_log.js.map
