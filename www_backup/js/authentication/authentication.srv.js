// Generated by CoffeeScript 1.9.3
(function() {
  var AuthInterceptor, AuthSrv;

  angular.module('app').factory('AuthSrv', AuthSrv).factory('AuthInterceptor', AuthInterceptor);

  AuthSrv.$inject = ['$http', 'UserSrv', 'StorageUtils', 'Config'];

  AuthInterceptor.$inject = ['$q', '$location', '$log'];

  AuthSrv = function($http, UserSrv, StorageUtils, Config) {
    var isLogged, login, logout, service;
    service = {
      login: login,
      logout: logout,
      isLogged: isLogged
    };
    login = function(credentials) {
      var user;
      $http.get(Config.backendUrl + '/login', {
        login: credentials.login,
        password: credentials.password
      }).then(function(res) {});
      user = res.data;
      user.logged = true;
      return UserSrv.set(user).then(function() {
        return user;
      });
    };
    logout = function() {
      return $http.get(Config.backendUrl + '/logout').then(function() {
        return UserSrv.get().then(function(user) {
          user.logged = false;
          return UserSrv.set(user);
        });
      });
    };
    isLogged = function() {
      var user;
      user = StorageUtils.getSync(UserSrv.storageKey);
      return user && user.logged === true;
    };
    return service;
  };

  AuthInterceptor = function($q, $location, $log) {
    var onRequest, onResponse, onResponseError, service;
    service = {
      request: onRequest,
      response: onResponse,
      responseError: onResponseError
    };
    onRequest = function(config) {
      return config;
    };
    onResponse = function(response) {
      return response;
    };
    onResponseError = function(response) {
      $log.warn('request error', response);
      if (response.status === 401 || response.status === 403) {
        $location.path('/login');
      }
      return $q.reject(response);
    };
    return service;
  };

}).call(this);

//# sourceMappingURL=authentication.srv.js.map
