// Generated by CoffeeScript 1.9.3
(function() {
  angular.module('app', ['ionic', 'ngCordova', 'LocalForageModule']).run(function($rootScope, $state, $log, AuthSrv, UserSrv, PushPlugin, ToastPlugin, Config) {
    var checkRouteRights;
    $rootScope.$on('$stateChangeStart', function() {
      return console.log('StateChange', arguments);
    });
    checkRouteRights = function() {
      return $rootScope.$on('$stateChangeStart', function(event, toState, toParams, fromState, fromParams) {
        var logged, restricted;
        if (toState && toState.data && Array.isArray(toState.data.restrictAccess)) {
          restricted = toState.data.restrictAccess;
          logged = AuthSrv.isLogged();
          if (logged && restricted.indexOf('notLogged') > -1) {
            event.preventDefault();
            $log.log('IllegalAccess', 'State <' + toState.name + '> is restricted to non logged users !');
            return $state.go('loading');
          } else if (!logged && restricted.indexOf('logged') > -1) {
            event.preventDefault();
            $log.log('IllegalAccess', 'State <' + toState.name + '> is restricted to logged users !');
            return $state.go('loading');
          }
        }
      });
    };
    return checkRouteRights();
  }).config(function($urlRouterProvider, $provide, $httpProvider) {
    $urlRouterProvider.otherwise('/loading');
    $provide.decorator('$log', [
      '$delegate', 'customLogger', function($delegate, customLogger) {
        return customLogger($delegate);
      }
    ]);
    return $httpProvider.interceptors.push('AuthInterceptor');
  });

}).call(this);

//# sourceMappingURL=app.js.map
