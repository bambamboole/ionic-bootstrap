// Generated by CoffeeScript 1.9.3
(function() {
  angular.module('app').factory('GeolocationPlugin', function($window, $q, $timeout, $log, PluginUtils) {

    /*
       * Solutions :
       *  -> reboot device
       *  -> don't use cordova plugin !
       *  -> use native geolocation (should code plugin...)
     */
    var getCurrentPosition, getCurrentPositionByWatch, pluginName, pluginTest, service;
    pluginName = 'Geolocation';
    pluginTest = function() {
      return $window.navigator && $window.navigator.geolocation;
    };
    service = {
      getCurrentPosition: getCurrentPosition
    };
    getCurrentPosition = function(_timeout, _enableHighAccuracy, _maximumAge) {
      var opts;
      opts = {
        enableHighAccuracy: _enableHighAccuracy ? _enableHighAccuracy : true,
        timeout: _timeout ? _timeout : 10000,
        maximumAge: _maximumAge ? _maximumAge : 0
      };
      return PluginUtils.onReady(pluginName, pluginTest).then(function() {
        var defer, geolocTimeout;
        defer = $q.defer();
        geolocTimeout = $timeout((function() {
          return defer.reject({
            message: 'Geolocation didn\'t responded within ' + opts.timeout + ' millis :('
          });
        }), opts.timeout);
        $window.navigator.geolocation.getCurrentPosition((function(position) {
          $timeout.cancel(geolocTimeout);
          return defer.resolve(position);
        }), (function(error) {
          $timeout.cancel(geolocTimeout);
          $log.error('pluginError:' + pluginName, error);
          return defer.reject(error);
        }), opts);
        return defer.promise;
      });
    };
    getCurrentPositionByWatch = function(_timeout, _enableHighAccuracy, _maximumAge) {
      var opts;
      opts = {
        enableHighAccuracy: _enableHighAccuracy ? _enableHighAccuracy : true,
        timeout: _timeout ? _timeout : 10000,
        maximumAge: _maximumAge ? _maximumAge : 1000
      };
      return PluginUtils.onReady(pluginName, pluginTest).then(function() {
        var defer, geolocTimeout, watchID;
        defer = $q.defer();
        watchID = null;
        geolocTimeout = $timeout((function() {
          $window.navigator.geolocation.clearWatch(watchID);
          return defer.reject({
            message: 'Geolocation didn\'t responded within ' + opts.timeout + ' millis :('
          });
        }), opts.timeout);
        watchID = $window.navigator.geolocation.watchPosition((function(position) {
          $window.navigator.geolocation.clearWatch(watchID);
          $timeout.cancel(geolocTimeout);
          return defer.resolve(position);
        }), (function(error) {
          $timeout.cancel(geolocTimeout);
          $log.error('pluginError:' + pluginName, error);
          return defer.reject(error);
        }), opts);
        return defer.promise;
      });
    };
    return service;
  });


  /**************************
   *                        *
   *      Browser Mock      *
   *                        *
  #************************
   */

  ionic.Platform.ready(function() {
    if (!(ionic.Platform.isAndroid() || ionic.Platform.isIOS() || ionic.Platform.isIPad())) {

    } else {

    }
  });

}).call(this);

//# sourceMappingURL=geolocation.js.map
