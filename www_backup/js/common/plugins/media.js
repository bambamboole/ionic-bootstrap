// Generated by CoffeeScript 1.9.3
(function() {
  angular.module('app').factory('MediaPlugin', function($window, $q, $ionicPlatform, $log, PluginUtils) {
    var errorToMessage, loadMedia, pluginName, pluginTest, service, statusToMessage;
    pluginName = 'Media';
    pluginTest = function() {
      return $window.Media;
    };
    service = {
      loadMedia: loadMedia,
      statusToMessage: statusToMessage,
      errorToMessage: errorToMessage
    };
    loadMedia = function(src, onStop, onError, onStatus) {
      return PluginUtils.onReady(pluginName, pluginTest).then(function() {
        var mediaError, mediaStatus, mediaSuccess;
        mediaSuccess = function() {
          if (onStop) {
            return onStop();
          }
        };
        mediaError = function(error) {
          $log.error('pluginError:' + pluginName, {
            src: src,
            code: error.code,
            message: errorToMessage(error.code)
          });
          if (onError) {
            return onError(error);
          }
        };
        mediaStatus = function(status) {
          if (onStatus) {
            return onStatus(status);
          }
        };
        if ($ionicPlatform.is('android')) {
          src = '/android_asset/www/' + src;
        }
        return new $window.Media(src, mediaSuccess, mediaError, mediaStatus);
      });
    };
    statusToMessage = function(status) {
      if (status === 0) {
        return 'Media.MEDIA_NONE';
      } else if (status === 1) {
        return 'Media.MEDIA_STARTING';
      } else if (status === 2) {
        return 'Media.MEDIA_RUNNING';
      } else if (status === 3) {
        return 'Media.MEDIA_PAUSED';
      } else if (status === 4) {
        return 'Media.MEDIA_STOPPED';
      } else {
        return 'Unknown status <' + status + '>';
      }
    };
    errorToMessage = function(code) {
      if (code === 1) {
        return 'MediaError.MEDIA_ERR_ABORTED';
      } else if (code === 2) {
        return 'MediaError.MEDIA_ERR_NETWORK';
      } else if (code === 3) {
        return 'MediaError.MEDIA_ERR_DECODE';
      } else if (code === 4) {
        return 'MediaError.MEDIA_ERR_NONE_SUPPORTED';
      } else {
        return 'Unknown code <' + code + '>';
      }
    };
    return service;
  });


  /**************************
   *                        *
   *      Browser Mock      *
   *                        *
  #************************
   */

  ionic.Platform.ready(function() {
    if (!(ionic.Platform.isAndroid() || ionic.Platform.isIOS() || ionic.Platform.isIPad())) {
      if (!window.Media) {
        return window.Media = function(src, mediaSuccess, mediaError, mediaStatus) {
          var sound;
          if (typeof Audio !== 'function' && typeof Audio !== 'object') {
            console.warn('HTML5 Audio is not supported in this browser');
          }
          sound = new Audio;
          sound.src = src;
          sound.addEventListener('ended', mediaSuccess, false);
          sound.load();
          return {
            getCurrentPosition: function(mediaSuccess, mediaError) {
              return mediaSuccess(sound.currentTime);
            },
            getDuration: function() {
              if (isNaN(sound.duration)) {
                return -1;
              } else {
                return sound.duration;
              }
            },
            play: function() {
              return sound.play();
            },
            pause: function() {
              return sound.pause();
            },
            release: function() {},
            seekTo: function(milliseconds) {},
            setVolume: function(volume) {
              return sound.volume = volume;
            },
            startRecord: function() {},
            stopRecord: function() {},
            stop: function() {
              sound.pause();
              if (mediaSuccess) {
                return mediaSuccess();
              }
            }
          };
        };
      }
    }
  });

}).call(this);

//# sourceMappingURL=media.js.map
