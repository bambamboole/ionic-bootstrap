// Generated by CoffeeScript 1.9.3
(function() {
  var LocalForageUtils, LocalStorageProvider;

  angular.module('app').provider('StorageUtils', LocalStorageProvider).factory('LocalForageUtils', LocalForageUtils).provider('LocalStorageUtils', LocalStorageProvider);

  LocalForageUtils = function($localForage, $q, $log, Utils, Config) {
    var _clear, _clearStartingWith, _get, _getSync, _remove, _set, promiseStorageCache, service, storageCache;
    storageCache = {};
    promiseStorageCache = {};
    service = {
      get: _get,
      set: _set,
      remove: _remove,
      clear: _clear,
      clearStartingWith: _clearStartingWith,
      getSync: _getSync
    };
    _get = function(key, _defaultValue) {
      if (storageCache[key]) {
        return Utils.async(function() {
          return angular.copy(storageCache[key]);
        });
      } else if (promiseStorageCache[key]) {
        return promiseStorageCache[key];
      } else {
        if (Config.storage) {
          promiseStorageCache[key] = $localForage.getItem(Config.storagePrefix + key).then(function(value) {
            var e;
            try {
              storageCache[key] = JSON.parse(value) || angular.copy(_defaultValue);
            } catch (_error) {
              e = _error;
              storageCache[key] = angular.copy(_defaultValue);
            }
            delete promiseStorageCache[key];
            return angular.copy(storageCache[key]);
          }, function(error) {
            $log.error('error in LocalForageUtils._get(' + key + ')', error);
            return delete promiseStorageCache[key];
          });
          return promiseStorageCache[key];
        } else {
          storageCache[key] = angular.copy(_defaultValue);
          return Utils.async(function() {
            return angular.copy(storageCache[key]);
          });
        }
      }
    };
    _getSync = function(key, _defaultValue) {
      if (storageCache[key]) {
        return angular.copy(storageCache[key]);
      } else {
        _get(key, _defaultValue);
        return angular.copy(_defaultValue);
      }
    };
    _set = function(key, value) {
      if (!angular.equals(storageCache[key], value)) {
        storageCache[key] = angular.copy(value);
        if (Config.storage) {
          return $localForage.setItem(Config.storagePrefix + key, JSON.stringify(storageCache[key])).then((function(value) {}), function(error) {
            return $log.error('error in LocalForageUtils._set(' + key + ')', error);
          });
        } else {
          return $q.when();
        }
      } else {
        $log.debug('Don\'t save <' + key + '> because values are equals !', value);
        return $q.when();
      }
    };
    _remove = function(key) {
      $log.debug('Remove <' + key + '> from storage !');
      delete storageCache[key];
      if (Config.storage) {
        return $localForage.removeItem(Config.storagePrefix + key);
      } else {
        return $q.when();
      }
    };
    _clear = function() {
      storageCache = {};
      if (Config.storage) {
        return $localForage.clear();
      } else {
        return $q.when();
      }
    };
    _clearStartingWith = function(keyStartWith) {
      var i;
      for (i in storageCache) {
        if (Utils.startsWith(i, keyStartWith)) {
          delete storageCache[i];
        }
      }
      if (Config.storage) {
        return $localForage.keys().then(function(keys) {
          var promises;
          promises = [];
          for (i in keys) {
            if (Utils.startsWith(keys[i], Config.storagePrefix + keyStartWith)) {
              promises.push($localForage.removeItem(keys[i]));
            }
          }
          return $q.all(promises).then(function(results) {});
        });
      } else {
        return $q.when();
      }
    };
    return service;
  };

  LocalStorageProvider = function(Config) {
    var LocalStorageUtils, _get, storageCache;
    storageCache = {};
    _get = function(key, _defaultValue) {
      var e;
      if (!storageCache[key]) {
        if (Config.storage && window.localStorage) {
          try {
            storageCache[key] = JSON.parse(window.localStorage.getItem(Config.storagePrefix + key)) || angular.copy(_defaultValue);
          } catch (_error) {
            e = _error;
            storageCache[key] = angular.copy(_defaultValue);
          }
        } else {
          storageCache[key] = angular.copy(_defaultValue);
        }
      }
      return angular.copy(storageCache[key]);
    };
    LocalStorageUtils = function($window, $log, Utils) {
      var _clear, _clearStartingWith, _remove, _set, service;
      service = {
        get: function(key, _defaultValue) {
          return Utils.async(function() {
            return _get(key, _defaultValue);
          });
        },
        set: function(key, value) {
          return Utils.async(function() {
            return _set(key, value);
          });
        },
        remove: function(key) {
          return Utils.async(function() {
            return _remove(key);
          });
        },
        clear: function() {
          return Utils.async(function() {
            return _clear();
          });
        },
        clearStartingWith: function(keyStartWith) {
          return Utils.async(function() {
            return _clearStartingWith(keyStartWith);
          });
        },
        getSync: _get,
        setSync: _set,
        removeSync: _remove,
        clearSync: _clear,
        clearStartingWithSync: _clearStartingWith
      };
      _set = function(key, value) {
        if (!angular.equals(storageCache[key], value)) {
          storageCache[key] = angular.copy(value);
          if (Config.storage && $window.localStorage) {
            return $window.localStorage.setItem(Config.storagePrefix + key, JSON.stringify(storageCache[key]));
          }
        } else {
          return $log.debug('Don\'t save <' + key + '> because values are equals !');
        }
      };
      _remove = function(key) {
        $log.debug('Remove <' + key + '> from storage !');
        delete storageCache[key];
        if (Config.storage && $window.localStorage) {
          return $window.localStorage.removeItem(Config.storagePrefix + key);
        }
      };
      _clear = function() {
        storageCache = {};
        if (Config.storage && $window.localStorage) {
          return $window.localStorage.clear();
        }
      };
      _clearStartingWith = function(keyStartWith) {
        var i, j, key, results1;
        for (i in storageCache) {
          if (Utils.startsWith(i, keyStartWith)) {
            delete storageCache[i];
          }
        }
        if (Config.storage && $window.localStorage) {
          j = $window.localStorage.length - 1;
          results1 = [];
          while (j >= 0) {
            key = $window.localStorage.key(j);
            if (Utils.startsWith(key, Config.storagePrefix + keyStartWith)) {
              $window.localStorage.removeItem(key);
            }
            results1.push(j--);
          }
          return results1;
        }
      };
      return service;
    };
    this.getSync = _get;
    this.$get = LocalStorageUtils;
    return LocalStorageUtils.$inject = ['$window', '$log', 'Utils'];
  };

}).call(this);

//# sourceMappingURL=storage-utils.js.map
