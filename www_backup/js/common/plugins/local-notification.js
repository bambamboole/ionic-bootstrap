// Generated by CoffeeScript 1.9.3
(function() {
  angular.module('app').factory('LocalNotificationPlugin', function($window, $q, PluginUtils) {
    var cancel, onReady, pluginName, pluginTest, schedule, service;
    pluginName = 'LocalNotification';
    pluginTest = function() {
      return $window.plugin && $window.plugin.notification && $window.plugin.notification.local;
    };
    service = {
      schedule: schedule,
      cancel: cancel,
      onClick: function(callback) {
        return onReady('click', callback);
      }
    };
    schedule = function(opts) {
      return PluginUtils.onReady(pluginName, pluginTest).then(function() {
        return $window.plugin.notification.local.schedule(opts);
      });
    };
    cancel = function(id) {
      return PluginUtils.onReady(pluginName, pluginTest).then(function() {
        var defer;
        defer = $q.defer();
        $window.plugin.notification.local.cancel(id, function() {
          return defer.resolve();
        });
        return defer.promise;
      });
    };
    onReady = function(event, callback) {
      return PluginUtils.onReady(pluginName, pluginTest).then(function() {
        return $window.plugin.notification.local.on(event, callback);
      });
    };
    return service;
  });

  ionic.Platform.ready(function() {
    if (!(ionic.Platform.isAndroid() || ionic.Platform.isIOS() || ionic.Platform.isIPad())) {
      if (!window.plugin) {
        window.plugin = {};
      }
      if (!window.plugin.notification) {
        window.plugin.notification = {};
      }
      if (!window.plugin.notification.local) {
        return window.plugin.notification.local = (function() {
          var defaults, notifs, ret, withDefaults;
          notifs = {};
          defaults = {
            id: '0',
            title: '',
            text: '',
            every: 0,
            at: new Date,
            badge: 0,
            sound: 'res://platform_default',
            data: null,
            icon: 'res://icon',
            smallIcon: 'res://ic_popup_reminder',
            ongoing: false,
            led: 'FFFFFF'
          };
          ret = {
            hasPermission: function(callback, scope) {
              if (callback) {
                callback(true);
              }
            },
            registerPermission: function(callback, scope) {
              if (callback) {
                callback(true);
              }
            },
            schedule: function(opts, callback, scope) {
              var i, params;
              if (!Array.isArray(opts)) {
                opts = [opts];
              }
              for (i in opts) {
                params = withDefaults(opts[i]);
                if (ret.onadd) {
                  ret.onadd(params.id, 'foreground', params.json);
                }
                notifs[params.id] = params;
              }
              if (callback) {
                callback();
              }
            },
            cancel: function(id, callback, scope) {
              if (ret.oncancel) {
                ret.oncancel(id, 'foreground', notifs[id].json);
              }
              delete notifs[id];
              if (callback) {
                callback();
              }
            },
            cancelAll: function(callback, scope) {
              var i;
              for (i in notifs) {
                if (ret.oncancel) {
                  ret.oncancel(notifs[i].id, 'foreground', notifs[i].json);
                }
                delete notifs[i];
              }
              if (callback) {
                callback();
              }
            },
            on: function(event, callback) {},
            isScheduled: function(id, callback, scope) {
              if (callback) {
                callback(!!notifs[id]);
              }
            },
            getScheduledIds: function(callback, scope) {
              var i, ids;
              if (callback) {
                ids = [];
                for (i in notifs) {
                  ids.push(notifs[i].id);
                }
                callback(ids);
              }
            },
            isTriggered: function(id, callback, scope) {
              if (callback) {
                callback(false);
              }
            },
            getTriggeredIds: function(callback, scope) {
              if (callback) {
                callback([]);
              }
            },
            getDefaults: function() {
              return JSON.parse(JSON.stringify(defaults));
            },
            setDefaults: function(opts) {
              defaults = withDefaults(opts);
            }
          };
          withDefaults = function(opts) {
            var i, res;
            res = JSON.parse(JSON.stringify(defaults));
            for (i in opts) {
              res[i] = opts[i];
            }
            return res;
          };
          return ret;
        })();
      }
    }
  });

}).call(this);

//# sourceMappingURL=local-notification.js.map
